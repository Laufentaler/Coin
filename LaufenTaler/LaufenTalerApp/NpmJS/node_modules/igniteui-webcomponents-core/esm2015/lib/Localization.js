/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, NotSupportedException } from "./type";
import { stringIsNullOrEmpty, stringStartsWith } from "./string";
import { stringFormat1, stringFormat } from "./stringExtended";
/**
 * @hidden
 */
export let Localization = /*@__PURE__*/ (() => {
    class Localization extends Base {
        static register(a, b) {
            if (Localization.c == null) {
                Localization.c = {};
            }
            Localization.c[a] = b;
        }
        static getString(a, b, ...c) {
            let d;
            if (Localization.b != null) {
                d = Localization.b(a, b);
            }
            else {
                let e = null;
                if (Localization.c != null) {
                    e = Localization.c[a];
                }
                if (e != null) {
                    d = (e[b]);
                }
                else {
                    throw new NotSupportedException(1, "string override must be specified for localization");
                }
            }
            if (stringIsNullOrEmpty(d)) {
                d = "";
            }
            else if (c != null && c.length > 0) {
                d = stringFormat1(d, ...c);
            }
            return d;
        }
        static isRegistered(a) {
            return (Localization.c && Localization.c[a] !== undefined);
        }
        static d(a) {
            let b = (navigator.language ? navigator.language.toLowerCase() : "");
            if (stringStartsWith(b, "de") && Localization.isRegistered(stringFormat("{0}-de", a))) {
                return "de";
            }
            else if (stringStartsWith(b, "es") && Localization.isRegistered(stringFormat("{0}-es", a))) {
                return "es";
            }
            else if (stringStartsWith(b, "fr") && Localization.isRegistered(stringFormat("{0}-fr", a))) {
                return "fr";
            }
            else if (stringStartsWith(b, "ja") && Localization.isRegistered(stringFormat("{0}-ja", a))) {
                return "ja";
            }
            else if (stringStartsWith(b, "zh-hk") && Localization.isRegistered(stringFormat("{0}-zh-Hant", a))) {
                return "zh-hant";
            }
            else if (stringStartsWith(b, "zh-tw") && Localization.isRegistered(stringFormat("{0}-zh-Hant", a))) {
                return "zh-hant";
            }
            else if (stringStartsWith(b, "zh-mo") && Localization.isRegistered(stringFormat("{0}-zh-Hant", a))) {
                return "zh-hant";
            }
            else if (stringStartsWith(b, "zh-hant") && Localization.isRegistered(stringFormat("{0}-zh-Hant", a))) {
                return "zh-hant";
            }
            else if (stringStartsWith(b, "zh-cn") && Localization.isRegistered(stringFormat("{0}-zh-Hans", a))) {
                return "zh-hans";
            }
            else if (stringStartsWith(b, "zh-sg") && Localization.isRegistered(stringFormat("{0}-zh-Hans", a))) {
                return "zh-hans";
            }
            else if (stringStartsWith(b, "zh") && Localization.isRegistered(stringFormat("{0}-zh-Hans", a))) {
                return "zh-hans";
            }
            else if (stringStartsWith(b, "it") && Localization.isRegistered(stringFormat("{0}-it", a))) {
                return "it";
            }
            else if (stringStartsWith(b, "bg") && Localization.isRegistered(stringFormat("{0}-bg", a))) {
                return "bg";
            }
            else if (stringStartsWith(b, "ru") && Localization.isRegistered(stringFormat("{0}-ru", a))) {
                return "ru";
            }
            else if (stringStartsWith(b, "ko") && Localization.isRegistered(stringFormat("{0}-ko", a))) {
                return "ko";
            }
            return "en";
        }
    }
    Localization.$t = /*@__PURE__*/ markType(Localization, 'Localization');
    Localization.b = null;
    Localization.c = null;
    return Localization;
})();
//# sourceMappingURL=Localization.js.map
