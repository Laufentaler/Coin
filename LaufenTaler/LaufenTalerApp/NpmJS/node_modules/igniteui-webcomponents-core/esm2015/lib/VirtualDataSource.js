/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseDataSource } from "./BaseDataSource";
import { IPageCandidatesSink_$type } from "./IPageCandidatesSink";
import { PagePredictionEngine } from "./PagePredictionEngine";
import { LRUCache$2 } from "./LRUCache$2";
import { Base, runOn, Array_$type, Number_$type, typeCast, fromEnum, typeGetValue, String_$type, Boolean_$type, markType } from "./type";
import { IDataSourcePage_$type } from "./IDataSourcePage";
import { Dictionary$2 } from "./Dictionary$2";
import { SectionMap } from "./SectionMap";
import { DataSourceExecutionContext } from "./DataSourceExecutionContext";
import { SectionData } from "./SectionData";
import { List$1 } from "./List$1";
import { DataSourceSpecialRow } from "./DataSourceSpecialRow";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { TransactionState } from "./TransactionState";
import { TransactionType } from "./TransactionType";
import { DataSourceBatchStartedEventArgs } from "./DataSourceBatchStartedEventArgs";
import { DataSourceBatchCompletedEventArgs } from "./DataSourceBatchCompletedEventArgs";
import { truncate, intDivide } from "./number";
/**
 * @hidden
 */
export let VirtualDataSource = /*@__PURE__*/ (() => {
    class VirtualDataSource extends BaseDataSource {
        constructor() {
            super();
            this.cv = null;
            this.de = false;
            this.d1 = 0;
            this.c8 = null;
            this.cz = null;
            this.cy = null;
            this.d0 = 50;
            this.dz = 200;
            this.actualPageSizePopulated = false;
            this.dk = 50;
            this.dc = false;
            this.c3 = null;
            this.ct = null;
            this.cu = null;
            this.db = new LRUCache$2(Base.$, IDataSourcePage_$type, 0, 200);
            this.di = new Dictionary$2(Base.$, Array_$type, 0);
            this.dj = new Dictionary$2(Number_$type, Number_$type, 0);
            this.dd = false;
            this.cr = null;
            this.cw = null;
            this.da = new SectionMap();
            this.cs = null;
            this.dt = -1;
            this.dl = -1;
            this.dv = -1;
            this.dn = -1;
            this.dw = -1;
            this.dp = -1;
            this.du = -1;
            this.dm = -1;
            this.dy = -1;
            this.dx = -1;
            this.dr = -1;
            this.dq = -1;
            this.ds = -1;
            this.dh = new Dictionary$2(String_$type, Boolean_$type, 0);
            this._concurrencyTag = null;
            this.batchStarted = null;
            this.batchCompleted = null;
            this.c8 = new PagePredictionEngine();
            this.c8.e = this;
            this.c8.ag = this.actualPageSize;
            this.c8.f = this.da;
            this.executionContext = new DataSourceExecutionContext();
            this.c8.b = this.executionContext;
            this.isReadOnly = true;
        }
        get_isSectionCollapsable() {
            if (!this.isSectionContentVisible) {
                return true;
            }
            return super.get_isSectionCollapsable();
        }
        set_isSectionCollapsable(a) {
            super.set_isSectionCollapsable(a);
        }
        get_isSectionExpandedDefault() {
            if (!this.isSectionContentVisible) {
                return false;
            }
            if (this.isSectionCollapsable) {
                return super.get_isSectionExpandedDefault();
            }
            return true;
        }
        set_isSectionExpandedDefault(a) {
            super.set_isSectionExpandedDefault(a);
        }
        get_actualBaseDataProvider() {
            return this.actualDataProvider;
        }
        get actualBaseDataProvider() {
            return this.get_actualBaseDataProvider();
        }
        get dataProvider() {
            return this.cz;
        }
        set dataProvider(a) {
            let b = this.cz;
            this.cz = a;
            if (b != this.cz) {
                this.onPropertyUpdated("DataProvider", b, this.cz);
            }
        }
        get actualDataProvider() {
            if (this.cy == null) {
                this.actualDataProvider = this.resolveDataProvider();
            }
            return this.cy;
        }
        set actualDataProvider(a) {
            let b = this.cy;
            this.cy = a;
            if (b != this.cy) {
                this.onPropertyUpdated("ActualDataProvider", b, this.cy);
            }
        }
        get pageSizeRequested() {
            return this.d0;
        }
        set pageSizeRequested(a) {
            let b = this.d0;
            this.d0 = a;
            if (b != this.d0) {
                this.onPropertyUpdated("PageSizeRequested", b, this.d0);
            }
        }
        resetCache() {
            if (this.c4 != null) {
                this.c4.resetCache();
            }
            this.resetCacheOverride();
        }
        resetCacheOverride() {
            this.db.i();
        }
        get maxCachedPages() {
            return this.dz;
        }
        set maxCachedPages(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.onPropertyUpdated("MaxCachedPages", b, this.dz);
            }
        }
        get actualPageSize() {
            return this.dk;
        }
        set actualPageSize(a) {
            let b = this.dk;
            this.dk = a;
            if (b != this.dk) {
                this.onPropertyUpdated("ActualPageSize", b, this.dk);
            }
        }
        get_isSortingSupported() {
            if (this.externalDataSource != null && !this.dc) {
                this.dc = true;
                let a = this.externalDataSource.isSortingSupportedOverride;
                this.dc = false;
                return a;
            }
            return false;
        }
        get_isFilteringSupported() {
            if (this.externalDataSource != null && !this.dc) {
                this.dc = true;
                let a = this.externalDataSource.isFilteringSupportedOverride;
                this.dc = false;
                return a;
            }
            return false;
        }
        get_isGroupingSupported() {
            if (this.externalDataSource != null && !this.dc) {
                this.dc = true;
                let a = this.externalDataSource.isGroupingSupportedOverride;
                this.dc = false;
                return a;
            }
            return false;
        }
        get c4() {
            return this.c3;
        }
        set c4(a) {
            this.c3 = a;
            this.actualDataProvider = this.resolveDataProvider();
        }
        resolveDataProvider() {
            if (this.c4 == null) {
                return null;
            }
            return this.c4.resolveDataProvider();
        }
        propertyUpdatedOverride(a, b, c) {
            super.propertyUpdatedOverride(a, b, c);
            switch (a) {
                case "DataProvider":
                    this.actualDataProvider = this.dataProvider;
                    this.queueAutoRefresh();
                    break;
                case "ExecutionContext":
                    this.c8.b = this.executionContext;
                    break;
                case "ActualDataProvider":
                    this.actualDataProvider.pageSizeRequested = this.pageSizeRequested;
                    this.actualDataProvider.pageLoaded = runOn(this, this.el);
                    this.actualDataProvider.batchCompleted = runOn(this, this.ek);
                    this.queueAutoRefresh();
                    break;
                case "PageSizeRequested":
                    this.actualPageSize = this.pageSizeRequested;
                    if (this.actualDataProvider != null) {
                        this.actualDataProvider.pageSizeRequested = this.pageSizeRequested;
                    }
                    this.queueAutoRefresh();
                    break;
                case "ActualPageSize":
                    this.c8.ag = this.actualPageSize;
                    this.queueAutoRefresh();
                    break;
                case "FirstVisibleIndexRequested":
                    this.c8.aa = this.firstVisibleIndexRequested;
                    break;
                case "LastVisibleIndexRequested":
                    this.c8.ae = this.lastVisibleIndexRequested;
                    break;
                case "ActualCount":
                    if (this.actualDataProvider != null && !this.da.q) {
                        this.c8.ab = this.actualDataProvider.actualCount;
                    }
                    else {
                        this.c8.ab = this.actualCount;
                    }
                    this.queueAutoRefresh();
                    break;
                case "MaxCachedPages":
                    this.db.h = this.maxCachedPages;
                    break;
            }
        }
        d4(a) {
            if (this.an && this.da.q) {
                let b = this.c9(a);
                if (b == null) {
                    b = this.da.d();
                }
                return a - b.t;
            }
            return a;
        }
        el(a, b, c) {
            let d = this.executionContext;
            if (d != null) {
                d.execute(() => this.er(a, b, c));
            }
            else {
                this.er(a, b, c);
            }
        }
        er(a, b, c) {
            if (a == null) {
                b = this.resolveFullCount(b);
                if (this.actualCount != b) {
                    this.actualCount = b;
                }
                return;
            }
            if (c != this.actualPageSize && !this.actualPageSizePopulated) {
                this.actualPageSize = c;
            }
            this.actualPageSizePopulated = true;
            let d = a.pageIndex();
            this.em(d);
            this.db.item(d, a);
            let e = a.schema();
            if (e != null) {
                this.actualSchema = e;
            }
            let f = a.getSummaryInformation();
            if (this.summaryDescriptions.k.count > 0 && this.cw == null && f != null) {
                this.cw = f;
                for (let g = 0; g < this.summaryDescriptions.k.count; g++) {
                    this.cw[g].summaryIndex = g;
                }
                let h = SectionData.r(this.cw);
                this.d1 = h.count;
            }
            let i = a.getGroupInformation();
            if (this.groupDescriptions.k.count > 0 && this.cr == null && i != null) {
                this.cr = i;
                this.eq();
                this.de = false;
            }
            b = this.resolveFullCount(b);
            if (this.actualCount != b) {
                this.actualCount = b;
            }
            this.ep(a);
        }
        resolveFullCount(a) {
            if (this.cr != null) {
                return this.da.u + this.d1;
            }
            return a + this.d1;
        }
        eq() {
            let a = 0;
            let b = 0;
            let c = this.shouldEmitSectionHeaders;
            let d = this.shouldEmitSectionFooters;
            for (let e = 0; e < this.cr.length; e++) {
                let f = new SectionData();
                let g = b;
                let h = this.cr[e].endIndex - this.cr[e].startIndex;
                f.af = a;
                f.ae = e;
                f.d = new Array(this.groupDescriptions.k.count);
                for (let i = 0; i < this.groupDescriptions.k.count; i++) {
                    f.d[i] = 0;
                }
                f.ad = a + h;
                f.t = 0;
                f.e = this.cr[e].groupKeyProperties;
                f.f = this.cr[e].groupKeyValues;
                f.h = new Array(0);
                f.ai(this.sectionHeaderDisplayMode, this.isSectionExpandedDefault);
                this.ej(f, e == 0);
                if (d) {
                    f.u = f.c.length;
                }
                let j = 0;
                f.i = new Array(this.groupDescriptions.k.count);
                if (this.summaryScope == 0 || this.summaryScope == 2) {
                    if (this.cr[e].summaryResults != null) {
                        f.i[this.groupDescriptions.k.count - 1] = this.cr[e].summaryResults;
                        if (f.i != null) {
                            for (let k = 0; k < f.i[this.groupDescriptions.k.count - 1].length; k++) {
                                f.i[this.groupDescriptions.k.count - 1][k].summaryIndex = k;
                            }
                            j = SectionData.r(f.i[this.groupDescriptions.k.count - 1]).count;
                        }
                    }
                }
                if (this.includeSummaryRowsInSection) {
                    if (this.isSectionSummaryRowsAtBottom) {
                        f.ag = j;
                    }
                    else {
                        f.ah = j;
                        g += j;
                    }
                    b += j;
                    f.ad += j;
                }
                if (d) {
                    b++;
                }
                let l = 0;
                f.b = new Array(f.c.length);
                if (f.z > -1) {
                    let m = this.da.t._inner[f.z];
                    for (let n = 0; n < m.f.length; n++) {
                        l = n;
                        if (!Base.equalsStatic(m.f[n], f.f[n])) {
                            break;
                        }
                    }
                }
                for (let o = l; o < f.c.length; o++) {
                    b++;
                    g++;
                    f.ad++;
                    let p = this.ed(f, o);
                    f.a[o] = p;
                    f.b[o] = o - l;
                    if (this.dh.containsKey(p)) {
                        f.c[o] = this.dh.item(p);
                    }
                    else {
                        f.c[o] = this.isSectionExpandedDefault;
                    }
                    if (!f.c[o]) {
                        let q = 0;
                        let r = f.c.length - 1 - o;
                        f.ad -= q;
                        b -= q;
                        if (d) {
                            b--;
                            f.u--;
                        }
                        o += r;
                    }
                }
                f.y = f.v();
                f.t = g;
                this.da.z(f, h + 1);
                if (!f.p) {
                    let s = f.w();
                    f.ad -= f.d[s] + j;
                    b -= f.d[s] + j;
                }
                a = f.ad + 1;
                this.da.t.add(f);
                f.q = this.da.r(f);
            }
            let t = 0;
            for (let u = 0; u < this.da.t.count; u++) {
                let v = this.da.t._inner[u];
                if (this.shouldEmitSectionHeaders) {
                    if (!v.q) {
                        let w = v.ad - v.af + 1;
                        this.da.ae(v.ae);
                        this.da.ab(v, -w, -w);
                        u--;
                        t++;
                        continue;
                    }
                }
                if (v.z > -1) {
                    v.z -= t;
                }
            }
        }
        ej(a, b) {
            if (b) {
                this.ct = new Array(this.groupDescriptions.k.count);
                for (let c = 0; c < this.ct.length; c++) {
                    this.ct[c] = a;
                }
            }
            if (this.sectionHeaderDisplayMode == 1) {
                let d = false;
                let e = a.e.length;
                for (let f = 0; f < e; f++) {
                    if (d) {
                        this.ct[f] = a;
                        continue;
                    }
                    let g = false;
                    if (this.ct[f].f[f] == null) {
                        g = a.f[f] != null;
                    }
                    else {
                        g = !Base.equalsStatic(this.ct[f].f[f], a.f[f]);
                    }
                    if (g) {
                        this.ct[f] = a;
                        if (f - 1 > -1) {
                            let h = f - 1;
                            while (h >= 0 && this.ct[h].o) {
                                h = h - 1;
                            }
                            a.z = this.ct[h].ae;
                        }
                        d = true;
                    }
                }
            }
            else {
                let i = false;
                for (let j = 0; j < a.e.length; j++) {
                    if (this.ct[0].f[j] == null) {
                        if (this.ct[0].f[j] != a.f[j]) {
                            i = true;
                            break;
                        }
                        continue;
                    }
                    if (!Base.equalsStatic(this.ct[0].f[j], a.f[j])) {
                        i = true;
                        break;
                    }
                }
                if (i) {
                    this.ct[0] = a;
                }
            }
        }
        ei(a) {
        }
        ep(a) {
            if (this.updateNotifier != null) {
                let b = a.pageIndex() * this.actualPageSize;
                if (this.actualDataProvider != null) {
                    if (b > this.actualDataProvider.actualCount) {
                        return;
                    }
                }
                let c = this.d3(b);
                let d = this.d3(b + a.count() - 1);
                if (c > 0 && this.getRowType(c - 1) == 1) {
                    c--;
                }
                if (this.actualCount == 0 && a.count() == 0) {
                    this.onClearItems();
                }
                else {
                    this.updateNotifier.rangeActualized(c, d);
                }
            }
        }
        d3(a) {
            if (this.an && this.da.q) {
                let b = this.da.g(a);
                if (b == null) {
                    b = this.da.d();
                }
                if (!b.p) {
                    return b.af;
                }
                return a + b.t;
            }
            return a;
        }
        en(a) {
            a();
        }
        get_isVirtual() {
            return true;
        }
        isPlaceholderItem(a) {
            let b = this.cx(a);
            let c = b[0];
            if (!this.db.d(c)) {
                if (b[1] == -1) {
                    return false;
                }
                return true;
            }
            return false;
        }
        getItemAtIndex(a) {
            if (a >= this.actualCount - this.d1) {
                return this.d8(a);
            }
            let b = this.cx(a);
            let c = b[0];
            if (!this.db.d(c)) {
                if (b[1] == -1) {
                    return this.d8(a);
                }
                return null;
            }
            let d = this.db.item(c);
            let e = b[1];
            if (e == -1) {
                return this.d8(a);
            }
            return d.getItemAtIndex(e);
        }
        getItemFromKey(a) {
            let b = this.indexOfKey(a);
            if (b >= 0) {
                return this.getItemAtIndex(b);
            }
            return null;
        }
        d8(a) {
            if (a >= this.actualCount - this.d1) {
                let b = new DataSourceSpecialRow();
                b.rowType = 4;
                b.level = 0;
                let c = a - (this.actualCount - this.d1);
                let d = SectionData.r(this.cw);
                let e = new Array(d._inner[c].count);
                d._inner[c].values.copyTo(e, 0);
                b.summaryResults = e;
                return b;
            }
            let f = this.c9(a);
            if (f != null) {
                let g = f.j(a);
                if (g == 1 || g == 2) {
                    let h = new DataSourceSpecialRow();
                    h.rowType = g;
                    h.summaryResults = f.i[f.i.length - 1];
                    h.level = g == 1 ? f.w() + (a - f.af) : (f.u - 1) - (f.w() + (a - (f.ad - f.u + 1)));
                    if (this.sectionHeaderDisplayMode == 0) {
                        for (let i = 0; i < this.groupDescriptions.k.count; i++) {
                            h.setSectionValue(this.groupDescriptions.k.item(i).propertyName, f.f[i]);
                            h.setValue(this.groupDescriptions.k.item(i).propertyName, f.f[i]);
                        }
                    }
                    else {
                        if (h.level >= 0 && h.level < this.groupDescriptions.k.count) {
                            h.setSectionValue(this.groupDescriptions.k.item(h.level).propertyName, f.f[h.level]);
                            h.setValue(this.groupDescriptions.k.item(h.level).propertyName, f.f[h.level]);
                        }
                    }
                    return h;
                }
                else if (g == 5) {
                    let j = new DataSourceSpecialRow();
                    j.rowType = 5;
                    j.level = f.c.length;
                    let k = f.x(a);
                    let l = SectionData.r(f.i[f.i.length - 1]);
                    let m = new Array(l._inner[k].count);
                    l._inner[k].values.copyTo(m, 0);
                    j.summaryResults = m;
                    return j;
                }
            }
            return null;
        }
        cx(a) {
            if (this.an && this.da.q) {
                let b = false;
                let c = this.c9(a);
                if (c == null) {
                    c = this.da.d();
                    if (this.cw.length > 0 && a > c.ad) {
                        b = true;
                    }
                }
                let d = c.af;
                if (this.shouldEmitSectionHeaders && a >= d && a < d + c.v()) {
                    b = true;
                }
                if (a - (d + c.v() - 1) <= c.aa + c.ah) {
                    b = true;
                }
                if (this.shouldEmitSectionFooters) {
                    if (a <= c.ad && a >= c.ad - c.c.length - c.ag) {
                        b = true;
                    }
                }
                else if (c.ag > 0) {
                    if (a > c.ad - c.ag && a <= c.ad) {
                        b = true;
                    }
                }
                let e = a - c.t;
                let f = truncate(Math.floor(e / this.actualPageSize));
                let g = e % this.actualPageSize;
                if (b) {
                    g = -1;
                }
                let h = new Array(2);
                h[0] = f;
                h[1] = g;
                return h;
            }
            else {
                let i = truncate(Math.floor(a / this.actualPageSize));
                let j = a % this.actualPageSize;
                let k = new Array(2);
                k[0] = i;
                k[1] = j;
                return k;
            }
        }
        c9(a) {
            return this.da.e(a);
        }
        getItemPropertyAtIndex(a, b) {
            if (a > (this.actualCount - 1) - this.d1) {
                return this.d9(a, b);
            }
            let c = this.cx(a);
            let d = c[0];
            if (!this.db.d(d)) {
                if (c[1] == -1) {
                    return this.d9(a, b);
                }
                return null;
            }
            let e = this.db.item(d);
            let f = c[1];
            if (f == -1) {
                return this.d9(a, b);
            }
            if (this.ao()) {
                let g = e.getItemAtIndex(f);
                let h = this.al(g, b);
                if (h) {
                    let i = this.ay(g, b);
                    return i;
                }
            }
            return e.getItemValueAtIndex(f, b);
        }
        d9(a, b) {
            let c = this.d8(a);
            if (typeCast(DataSourceSpecialRow.$, c) !== null) {
                return c.getValue(b);
            }
            return null;
        }
        eo(a) {
            if (!this.dj.containsKey(a)) {
                this.dj.addItem(a, 1);
            }
            else {
                this.dj.item(a, this.dj.item(a) + 1);
            }
        }
        em(a) {
            if (this.dj.containsKey(a)) {
                this.dj.item(a, this.dj.item(a) - 1);
                if (this.dj.item(a) <= 0) {
                    this.dj.removeItem(a);
                    if (this.actualDataProvider != null) {
                        this.actualDataProvider.removePageRequest(a);
                    }
                }
            }
        }
        addCandidate(a, b) {
            let c = false;
            if (!this.di.containsKey(a)) {
                let d = new List$1(Number_$type, 0);
                let e = this.transformPage(a);
                for (let f = 0; f < e.length; f++) {
                    let g = e[f];
                    if (!this.db.d(g)) {
                        d.add(g);
                        this.eo(g);
                        let h = this.dj.item(g);
                        if (h == 1 && this.actualDataProvider != null) {
                            this.actualDataProvider.addPageRequest(g, b);
                        }
                        c = true;
                    }
                }
                if (d.count > 0) {
                    this.di.addItem(a, d.toArray());
                }
            }
            return c;
        }
        removeCandidate(a) {
            if (this.di.containsKey(a)) {
                for (let b = 0; b < this.di.item(a).length; b++) {
                    let c = this.di.item(a)[b];
                    this.em(c);
                }
                this.di.removeItem(a);
            }
        }
        transformPage(a) {
            let b = [a];
            if (this.an && this.da.q) {
                let c = a * this.actualPageSize;
                let d = c + this.actualPageSize - 1;
                let e = this.c9(c);
                let f = new List$1(Number_$type, 0);
                for (let g = c; g <= d; g++) {
                    if (e == null) {
                        break;
                    }
                    if (g > e.ad) {
                        if (e.ae < this.da.t.count - 1) {
                            e = this.da.t._inner[e.ae + 1];
                        }
                        else {
                            break;
                        }
                    }
                    if (!e.p || (g >= e.af && g <= e.af + (e.v() - 1) + e.aa)) {
                        continue;
                    }
                    let h = g - e.t;
                    let i = intDivide(h, this.actualPageSize);
                    if (!f.contains(i)) {
                        f.add(i);
                    }
                }
                b = f.toArray();
            }
            return b;
        }
        getUnrealizedCount() {
            let a = this.db.g * this.actualPageSize;
            let b = this.actualCount - a;
            return b;
        }
        onSetItemOverride(a, b, c) {
            super.onSetItemOverride(a, b, c);
            let d = this.cx(a);
            let e = d[0];
            if (this.db.d(e)) {
                this.db.j(e);
            }
        }
        refreshInternalOverride() {
            super.refreshInternalOverride();
            this.actualPageSizePopulated = false;
            let a = this.actualCount != 0;
            this.dd = true;
            if (!this.de) {
                this.resetCache();
                if (a) {
                    this.onClearItems();
                }
                this.cr = null;
                this.cw = null;
                this.d1 = 0;
                this.da.v();
            }
            else {
                this.de = false;
                if (a) {
                    this.onClearItems();
                }
            }
            this.es();
            this.c8.au();
            this.dd = false;
        }
        es() {
            if (this.actualDataProvider != null) {
                for (let a of fromEnum(this.di.values)) {
                    for (let c = 0; c < a.length; c++) {
                        let b = a[c];
                        this.actualDataProvider.addPageRequest(b, 1);
                    }
                }
            }
        }
        onClearItemsOverride() {
            super.onClearItemsOverride();
            if (!this.dd) {
                this.queueAutoRefresh();
            }
        }
        onInsertItemOverride(a, b) {
            super.onInsertItemOverride(a, b);
            this.queueAutoRefresh();
        }
        onRemoveItemOverride(a, b) {
            super.onRemoveItemOverride(a, b);
            this.queueAutoRefresh();
        }
        get_isItemIndexLookupSupported() {
            return true;
        }
        get_isKeyIndexLookupSupported() {
            return true;
        }
        indexOfItem(a) {
            let b = this.db.b;
            let c = b.o;
            let d = b.q;
            let e = d.count;
            let f = b.p;
            for (let g = 0; g < e; g++) {
                if (f._inner[g]) {
                    continue;
                }
                let h = d._inner[g].b;
                let i = h.count();
                for (let j = 0; j < i; j++) {
                    if (this.dg(h.getItemAtIndex(j), a)) {
                        let k = typeGetValue(c._inner[g]);
                        let l = k * this.actualPageSize;
                        return l + j;
                    }
                }
            }
            if (this.actualDataProvider != null && this.actualDataProvider.isItemIndexLookupSupported) {
                return this.actualDataProvider.indexOfItem(a);
            }
            return -1;
        }
        dg(a, b) {
            if (a == null && b == null) {
                return true;
            }
            if (a == null || b == null) {
                return false;
            }
            return Base.equalsStatic(a, b);
        }
        indexOfKey(a) {
            let b = this.actualPrimaryKey;
            if (b == null || b.length < 1 || this.actualBaseDataProvider == null) {
                return -1;
            }
            this.ensureComparables(this.actualSchema);
            let c = this.c7();
            if (this.an && this.shouldEmitSectionHeaders && !this.isSectionContentVisible && this.isSectionHeaderNormalRow) {
                if (this.da.t.count > 0) {
                    for (let d = 0; d < this.da.t.count; d++) {
                        let e = this.da.t._inner[d];
                        let f = new DataSourceSpecialRow();
                        for (let g = 0; g < e.e.length; g++) {
                            let h = e.e[g];
                            let i = e.f[g];
                            f.setSectionValue(h, i);
                        }
                        if (c.i(f, a) == 0) {
                            return d;
                        }
                    }
                }
            }
            let j = this.db.b;
            let k = j.o;
            let l = j.q;
            let m = l.count;
            let n = j.p;
            for (let o = 0; o < m; o++) {
                if (n._inner[o]) {
                    continue;
                }
                let p = l._inner[o].b;
                let q = p.count();
                for (let r = 0; r < q; r++) {
                    if (c.i(p.getItemAtIndex(r), a) == 0) {
                        let s = typeGetValue(k._inner[o]);
                        let t = s * this.actualPageSize;
                        return t + r;
                    }
                }
            }
            if (this.actualDataProvider != null && this.actualDataProvider.isKeyIndexLookupSupported) {
                return this.actualDataProvider.indexOfKey(a);
            }
            return -1;
        }
        c7() {
            let a = new Array(this.actualPrimaryKey.length);
            for (let b = 0; b < a.length; b++) {
                a[b] = 0;
            }
            return new DataSourcePropertiesComparer(this.actualPrimaryKey, a, this.cv, this);
        }
        getStickyRowPriority(a) {
            let b = this.getRowType(a);
            switch (b) {
                case 1: return 100 - this.getRowLevel(a);
                case 2: return 99 - this.getRowLevel(a);
                case 3:
                case 5: return 2;
                case 4: return 3;
            }
            return 1;
        }
        unpinRow(a) {
            super.unpinRow(a);
        }
        pinRow(a) {
            super.pinRow(a);
        }
        isRowPinned(a) {
            return super.isRowPinned(a);
        }
        getStickyRowsInRange(a, b) {
            if ((this.groupDescriptions == null || this.groupDescriptions.k.count == 0) && (this.summaryDescriptions == null || this.summaryDescriptions.k.count == 0)) {
                return null;
            }
            let c = this.c9(a);
            let d = this.c9(b);
            if (this.da.t.count > 0) {
                if (this.da.t.count == 1) {
                    c = this.da.t._inner[0];
                    d = this.da.t._inner[0];
                }
                else {
                    c = this.da.e(a);
                    if (c != null) {
                        while (c.z != -1) {
                            c = this.da.t._inner[c.z];
                        }
                    }
                    d = this.da.e(b);
                    if (b >= this.actualCount - this.d1) {
                        d = this.da.d();
                    }
                }
            }
            else if (this.d1 > 0) {
                let e = new List$1(Number_$type, 0);
                for (let f = this.actualCount - this.d1; f < this.actualCount; f++) {
                    e.add(f);
                }
                return e.toArray();
            }
            if (c == null || d == null) {
                return null;
            }
            if (c.ae == this.dt && c.aa == this.dv && c.af == this.dw && c.ad == this.du && c.ah == this.dy && c.ag == this.dx && d.ae == this.dl && d.aa == this.dn && d.af == this.dp && d.ad == this.dm && d.ah == this.dr && d.ag == this.dq && this.d1 == this.ds) {
                return this.cs;
            }
            this.dt = c.ae;
            this.dl = d.ae;
            this.dv = c.aa;
            this.dn = d.aa;
            this.dw = c.af;
            this.dp = d.af;
            this.du = c.ad;
            this.dm = d.ad;
            this.dr = d.ah;
            this.dq = d.ag;
            this.dy = c.ah;
            this.dx = c.ag;
            this.ds = this.d1;
            let g = new List$1(Number_$type, 0);
            for (let h = c.ae; h <= d.ae; h++) {
                let i = this.da.t._inner[h];
                let j = i.c.length;
                let k = i.v();
                if (this.shouldEmitSectionHeaders && this.an) {
                    for (let l = 0; l < i.c.length; l++) {
                        if (i.a[l] != null) {
                            let m = i.af + i.b[l];
                            g.add(m);
                        }
                        if (!i.c[l]) {
                            break;
                        }
                    }
                }
                if (i.p) {
                    for (let n = 0; n < i.ah; n++) {
                        g.add(i.af + n + k);
                    }
                    if (this.shouldEmitShiftedRows) {
                        for (let o = 0; o < i.aa; o++) {
                            g.add(i.af + o + j);
                        }
                    }
                    if (this.summaryScope == 0 || this.summaryScope == 2) {
                        if (this.includeSummaryRowsInSection && this.isSectionSummaryRowsAtBottom) {
                            for (let p = i.ag - 1; p >= 0; p--) {
                                if (this.shouldEmitSectionFooters) {
                                    g.add(i.ad - k - p);
                                }
                                else {
                                    g.add(i.ad - p);
                                }
                            }
                        }
                    }
                }
                if (this.shouldEmitSectionFooters && this.an) {
                    for (let q = i.c.length - 1; q >= 0; q--) {
                        if (!i.c[q]) {
                            break;
                        }
                        g.add(i.ad - q);
                    }
                }
            }
            for (let r = this.actualCount - this.d1; r < this.actualCount; r++) {
                g.add(r);
            }
            this.cs = g.toArray();
            return this.cs;
        }
        isExclusivelySticky(a) {
            let b = this.getRowType(a);
            return b == 1 || b == 2 || b == 4 || (this.isSectionSummaryRowsAtBottom && b == 5);
        }
        getRowType(a) {
            if (a < 0) {
                return 0;
            }
            let b = this.getItemAtIndex(a);
            let item_ = b;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                let c = b.rowType;
                if (this.isSectionHeaderNormalRow && c == 1) {
                    return 0;
                }
                return c;
            }
            return 0;
        }
        getIsRowExpandedAtIndex(a) {
            let b = this.da.e(a);
            if (b == null) {
                b = this.da.d();
            }
            for (let c = 0; c < b.a.length; c++) {
                if (b.a[c] != null) {
                    if (a == b.af + b.b[c]) {
                        return b.c[c];
                    }
                }
            }
            return super.getIsRowExpandedAtIndex(a);
        }
        setIsRowExpandedAtIndex(a, b) {
            let c = this.da.e(a);
            if (c == null) {
                c = this.da.d();
            }
            for (let d = 0; d < c.a.length; d++) {
                if (c.a[d] != null) {
                    if (a == c.af + c.b[d]) {
                        let e = false;
                        let f = c.a[d];
                        if (this.dh.containsKey(f) && this.dh.item(f) != b) {
                            let g = this.dh.item(f);
                            if (b == this.isSectionExpandedDefault) {
                                this.dh.removeItem(f);
                            }
                            else {
                                this.dh.item(f, b);
                            }
                            e = true;
                            this.onRowExpansionChanged(a, g, b);
                        }
                        else if (b != this.isSectionExpandedDefault) {
                            this.dh.addItem(f, b);
                            e = true;
                            this.onRowExpansionChanged(a, this.isSectionExpandedDefault, b);
                        }
                        if (e) {
                            this.da.v();
                            this.eq();
                            this.de = true;
                            if (this.actualCount != this.da.u) {
                                this.actualCount = this.da.u + this.d1;
                            }
                            else {
                                this.queueAutoRefresh();
                            }
                        }
                        break;
                    }
                }
            }
        }
        getRowLevel(a) {
            if (a < 0) {
                return 0;
            }
            let b = this.getItemAtIndex(a);
            let item_ = b;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                return b.level;
            }
            if (this.isGroupingSupported) {
                if (this.sectionHeaderDisplayMode == 1) {
                    return this.groupDescriptions.k.count;
                }
                else if (this.groupDescriptions.k.count > 0) {
                    return 1;
                }
            }
            return 0;
        }
        getRootSummaryRowCount() {
            return this.d1;
        }
        ec(a) {
            let b = "";
            for (let c = 0; c < a.e.length; c++) {
                b += a.e[c] + ":" + a.f[c];
            }
            return b;
        }
        ed(a, b) {
            if (this.sectionHeaderDisplayMode == 0) {
                return this.ec(a);
            }
            let c = "";
            for (let d = 0; d < a.e.length; d++) {
                c += a.e[d] + ":" + a.f[d] + ":";
            }
            c += b;
            return c;
        }
        getRootSummaryResults() {
            return this.cw;
        }
        getSectionSummaryResults(a) {
            if (this.da.t.count > 0 && a >= 0 && a < this.da.t.count) {
                return this.da.t._inner[a].i;
            }
            return null;
        }
        clone() {
            return null;
        }
        cloneProperties(a) {
            super.cloneProperties(a);
            let b = typeCast(VirtualDataSource.$, a);
            if (b != null) {
                b.pageSizeRequested = this.pageSizeRequested;
                b.maxCachedPages = this.maxCachedPages;
            }
        }
        get concurrencyTag() {
            return this._concurrencyTag;
        }
        set concurrencyTag(a) {
            this._concurrencyTag = a;
        }
        get_isBatchingEnabled() {
            return true;
        }
        set_isBatchingEnabled(a) {
            super.set_isBatchingEnabled(a);
        }
        updatePropertyAtKey(a, b, c, d = false) {
            let e = super.updatePropertyAtKey(a, b, c, d);
            if (this.concurrencyTag != null && this.ao()) {
                let f = this.indexOfKey(a);
                if (f > -1) {
                    let g = this.getItemAtIndex(f);
                    let h = this.actualDataProvider.getItemValue(g, this.concurrencyTag);
                    if (h != null) {
                        let i = this.t.g(a);
                        i.version = h;
                    }
                }
            }
            return e;
        }
        removeItemByKey(a) {
            super.removeItemByKey(a);
            if (this.concurrencyTag != null && this.ao()) {
                let b = this.indexOfKey(a);
                if (b > -1) {
                    let c = this.getItemAtIndex(b);
                    let d = this.actualDataProvider.getItemValue(c, this.concurrencyTag);
                    if (d != null) {
                        let e = this.t.g(a);
                        e.version = d;
                    }
                }
            }
        }
        ck(a, b) {
            if (a == 5) {
                let c = b;
                let d = c.a;
                let e = new List$1(TransactionState.$, 0);
                for (let f = 0; f < d.length; f++) {
                    let g = d[f].transactionType;
                    let h = null;
                    let i = null;
                    if (g == TransactionType.Delete || g == 1) {
                        let j = new Dictionary$2(String_$type, Base.$, 0);
                        let k = d[f].id;
                        for (let l = 0; l < this.actualPrimaryKey.length; l++) {
                            j.addItem(this.actualPrimaryKey[l], k[l]);
                        }
                        h = j;
                    }
                    if (g == 0) {
                        let m = new Dictionary$2(String_$type, Base.$, 0);
                        let n = d[f].id[0];
                        for (let o = 0; o < this.actualSchema.propertyNames.length; o++) {
                            let p = this.actualSchema.propertyNames[o];
                            m.addItem(p, this.actualDataProvider.getItemValue(n, p));
                        }
                        i = m;
                    }
                    else if (g == 1) {
                        i = d[f].value;
                    }
                    if (h != null) {
                        let q = {};
                        let r = h;
                        for (let s of fromEnum(r)) {
                            q[s.key] = s.value;
                        }
                        h = q;
                    }
                    if (i != null) {
                        let t = {};
                        let u = i;
                        for (let v of fromEnum(u)) {
                            t[v.key] = v.value;
                        }
                        i = t;
                    }
                    e.add(((() => {
                        let $ret = new TransactionState(h, g, i);
                        $ret.version = d[f].version;
                        return $ret;
                    })()));
                }
                let w = e.toArray();
                if (this.batchStarted != null) {
                    this.batchStarted(this, new DataSourceBatchStartedEventArgs(w));
                }
                this.actualDataProvider.createBatchRequest(w);
            }
        }
        ek(a, b, c) {
            if (b) {
                this.queueAutoRefresh();
            }
            if (this.batchCompleted != null) {
                this.batchCompleted(this, new DataSourceBatchCompletedEventArgs(a, c));
            }
        }
    }
    VirtualDataSource.$t = /*@__PURE__*/ markType(VirtualDataSource, 'VirtualDataSource', BaseDataSource.$, [IPageCandidatesSink_$type]);
    return VirtualDataSource;
})();
//# sourceMappingURL=VirtualDataSource.js.map
